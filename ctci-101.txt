
Regex
DNS
encoding
buffer overflow
Memory leak
basic commands

MOD = 10^9 + 7
(a*b)%M = ( (a%M) * (b%M) )%M

Decoding 2D position into 1D
(x,y) ele in (Row,Col) array
Encode
(x,y) = (x*Col + y)
Decode
(x*Col+y) = [ (x*Col + y)/Col, (x*Col + y)%Col ]

Traversal
BFS traversal/level traversal (x+1 and x can be traversed parallely)
DFS traversal/depth traversal (x+1 visited prior to x)


Uptime SLA

Downtime per year

90.0%

36 days, 12 hours

95.0%

18 days, 6 hours

99.0%

87 hours, 36 minutes

99.50%

43 hours, 48 minutes

99.90%

8 hours, 45 minutes, 36 seconds

99.99%

52 minutes, 33 seconds

99.999%

5 minutes, 15 seconds

99.9999%

32 seconds


bit operation

x & (x-1)
bit representation

DP
1.Weighted interval scheduling
Bin packing (skiena)
1. Detect
2. Recover
LCS (value optimize)
LIS
Knapsack (Wt,Value)
Palindrome substring
min cut palindrome



BT
Recursion = n!
Combination ( choose r items from n items) = (nCr) = (n-1 C r-1) + (n-1 C r) --> check c++ stanford
Matrix multiplication # ways to parenthesize mat
Rotate vector x[n] left by d position
GCD
Grey Code

Valid parenthesis
Longest substring
Palindrome partioning
Palindrome substring (2N-1) points

Linked list find intersection point

Head v/s tail recursion




BTree : Fast range queries

Tricks
1. Merging 2 sorted arrays (moving backwards)
2. Nieghbor traversing row[] = {1,-1,0,0} , col[] = {0,0,1,-1}
3. Value update during BT ( pass by reference)
4. visited + nextVisited trik
5. 2 way traversal ( from left to right and vice versa)
6. Linked list sentinel node trick
7. practical DS - n-queen
8. LL mid computation ( even fast == null vs odd fast != null)
9. Voting algo
10. 2 rectangles intersect or not
Deadlock , livelock => linearization

(Go to Google Coursera class)
Polymorphism
Overloading
Overriding
Java Concurrency

Machine level representaion (2's complement) vs Lang level representation


MUI (java | c++)

c++ : Iterators  for set,vector,map,array
Tree
Bottom up traversal

Regex
char class

Programmer's number
1. 2^32 = 4bn = 4X10^9
1. 2^20 = 4mn = 4X10^9

Parking lot design

Traversal
1. Diagonal
2. HZ
3. Snake or spiral

Tree T
1. In
2. Pre
3. Post

find successor
Max sum in bt

Metcongnition
Monkey mind


---------------------------------------------------------------------------------------------------------------------------
iterativeInorder(node)
  s ← empty stack
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
      s.push(node)
      node ← node.left
    else
      node ← s.pop()
      visit(node)
      node ← node.right

---------------------------------------------------------------------------------------------------------------------------
inorder(node)
  if (node = null)
    return
  inorder(node.left)
  visit(node)
  inorder(node.right)

---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------

preorder(node)
  if (node = null)
    return
  visit(node)
  preorder(node.left)
  preorder(node.right)

---------------------------------------------------------------------------------------------------------------------------
iterativePreorder(node)
  s ← empty stack
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
    visit(node)
    if (node.right ≠ null)
      s.push(node.right)
    node ← node.left
    else
    node ← s.pop()

---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------

postorder(node)
  if (node = null)
    return
  postorder(node.left)
  postorder(node.right)
  visit(node)


iterativePostorder(node)
  s ← empty stack
  lastNodeVisited ← null
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
      s.push(node)
      node ← node.left
    else
      peekNode ← s.peek()
       if right child exists and traversing node
       from left child, then move right
      if (peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right)
        node ← peekNode.right
      else
        visit(peekNode)
        lastNodeVisited ← s.pop()

---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
